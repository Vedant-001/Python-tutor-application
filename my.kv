WindowManager:
    MainWindow:
    ContentWindow:
<P>:
    Label:
        text: "You Need To Complete Previous Lessons to Study this one."
        size_hint: 0.6, 0.2
        pos_hint: {"x":0.2, "top":1}

    Button:
        text: "Previous"
        size_hint: 0.8, 0.2
        pos_hint: {"x":0.1, "y":0.1}
<MainWindow>:
    name: "main"

    GridLayout:
        cols:1
        size: root.width , root.height



        GridLayout:
            rows: 2

            Label:
                text: "!! Welcome to Python Tutorial!!"
                font_size:40
                background_color: (1.0, 1.0, 0.0, 0.5)
            Label:
                text:"!!HAPPY LEARNING!!"

        Button:
            text: "NEXT"
            background_color: (1.0, 1.0, 1.0, 1.0)
            on_release:
                app.root.current = "content"
                root.manager.transition.direction = "left"


<ContentWindow>:
    name: "content"

    GridLayout:
        rows : 6

        Button:
            text: "Lesson 1 : Operators"
            on_release:
                app.root.current = "op"
                root.manager.transition.direction = "left"
        Button:
            text: "Lesson 2 : Loops"
            on_release:
                on_release: root.btn1()
        Button:
            text: "Lesson 3 : Data Structures"
            on_release:
                on_release: root.btn2()
        Button:
            text: "Lesson 4 : Functions"
            on_release:
                on_release: root.btn3()
        Button:
            text: "Lesson 5 :Data Handling-Files"
            on_release: root.btn4()
        Button:
            text: "Lesson 6 : Application of what was taught in the course."
            on_release: root.btn5()
<OperatorWindow>:
    name: "op"
    GridLayout:

        rows : 4

        Button:
            text : "||SOME BASICS OF PYTHON||\n\nCLICK to Learn"
            on_release :
                app.root.current = "basic"
                root.manager.transition.direction= "up"
        Label:
            text: "In this Lesson we will learn about Operators in Python"
            font_size : 20
        Label:
            text:"Operators are of the following types:\n1.Arithmetic Operators\n2.Comparison Opertaors\n3.Logical Operators\n4.Bitwise Operators\n5.Assignment Operators\n6.Identity Operators"
            font_size: 17
        FloatLayout:
            cols:2
            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                on_release :
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

            Button:
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "What are arithmetic Operators?"
                on_release:
                    app.root.current = "aop"
                    root.manager.transition.direction = "left"
<BasicWindow>
    name : "basic"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.92}
            font_size : 24
            text: "About Python "
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\n\nPython is an easy to Learn language.\n\nIt is developer-friendly and high level programming language.\n\nPython is an interpreted language i.e. interpreter executes the code line by line at a time. \n\nThis makes debugging easy and thus suitable for beginners.\n\nPython supports object oriented language and concepts of classes and objects\n come into existence which will be further discussed.\n\nPython has a large standard library which provides rich set of module and functions \nso you do not have to write your own code for every single thing.\n\nPython is dynamically-typed language.\n That means the type (for example- int, double, long etc) for a variable is decided at run time\n not in advance. Because of this feature we do not need to specify the type of variable.\n "
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back to Content!"
                on_release :
                    app.root.current = "content"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Some Common Terms:"
                on_release:
                    app.root.current = "basic2"
                    root.manager.transition.direction = "left"
<Basic2Window>
    name : "basic2"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.92}
            font_size : 24
            text: "Some Common Terms"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 20
            text :"\nOperands:The values on which the operators act\n\nOperators:Elements which perform operation like addition,subtraction etc.\n\nExpression:A sequence containing operands and operators\n\nConstant:The  type of Variable which has a particular value throughout the code.\n\nVariable: The value of this data type can be modified as and when required.\n\nGlobal variable:The variable that are accesible everywhere in the program.\n\nLocal variable : Variables only accesible within that particular function or class.\n "
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back"
                on_release :
                    app.root.current = "basic"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Some Basic Syntax:"
                on_release:
                    app.root.current = "basic3"
                    root.manager.transition.direction = "left"

<Basic3Window>
    name : "basic3"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.92}
            font_size : 24
            text: "About Python "
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n "
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back!"
                on_release :
                    app.root.current = "basic2"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Arithmatic Operators!"
                on_release:
                    app.root.current = "aop"
                    root.manager.transition.direction = "left"

<ArithmaticOperatorWindow>:
    name : "aop"
    FloatLayout:
        size: root.width, root.height
        rows: 2
        Label:
            size_hint: 1,0.2
            pos_hint : {"x":0 ,"y":0.8}
            font_size : 22
            text : "Introduction To Arithmetic Operator's"
        Label:
            size_hint: 1, 0.5
            pos_hint: {"x":0, "y":0.39}
            font_size: 15
            text : "\nArithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication etc.\n\nOperator        Meaning\n +           Add two perands\n-           Subtract two perands \n*          Multiply two perands\n/          Divide the left operand by the right operand. Results in float output.\n%           Modulus- Remainder of the division of the left operand by the right.\n//          Floor division- division that results into whole number rounded to the previous number in the number lne.\n**          Exponent- left operand raised to the power of the right\n\nSyntax of Arithmetic operators loop:\n variable or constant<arithmetic operator>variable or constant"
        FloatLayout :
            cols : 2

            Label:
                size_hint : 0.35,0.45
                pos_hint:{"x":0,"y":0.11}
                text : "Example:\nx=15; y=4\n print(x+y)\nOUTPUT:\n19"
            Label :
                size_hint : 0.35,0.45
                pos_hint:{"x":0.5,"y":0.11}
                text : "print(13+7)\nOUTPUT:\n20"

            FloatLayout:
                cols : 2
                Button :
                    pos_hint:{"x":0,"y":0}
                    size_hint: 0.5, 0.15
                    text : "Back"
                    on_release :
                        app.root.current = "op"
                        root.manager.transition.direction = "right"
                Button :
                    pos_hint: {"x":0.5,"y":0}
                    size_hint : 0.5,0.15
                    text : "What is Comparision Operators?"
                    on_release:
                        app.root.current = "cop"
                        root.manager.transition.direction = "left"
<ConditionalOperatorWindow>
    name : "cop"
    FloatLayout:
        size: root.width, root.height
        rows:3
        Label:
            size_hint : 1,0.4
            pos_hint: {"x":0,"y":0.7}
            text:"Introduction To Condition Operator's"
            font_size : 20
        Label :
            size_hint : 1,0.2
            pos_hint: {"x":0,"y":0.6}
            text : "Comparison operators are used to compare values. It either returns True or False according to the condition.\nOperator        Meaning\n >        Greater than - True if the left operand is greater than the right\n<        Less than - True if the left operand is less than the right\n==        Equal to – True if both the operands are equal.\n>=        Greater than or equal to - True if the left operand is greater than or equal to the right.\n><=       Less than or equal to - True if the left operand is less than or equal to the right\n"
        Label :
            size_hint : 1,0.1
            pos_hint: {"x":0,"y":0.5}
            text : "Syntax of Comparison operators:\n (variable or constant<comparison operator>variable or constant)"
        FloatLayout:
            cols:2
            Label:
                size_hint : 0.35,0.45
                pos_hint:{"x":0,"y":0.15}
                text : "Example:\nx=15; y=4\n x>y\nOUTPUT:\nFalse\n"
                font_size : 15
            Label :
                size_hint : 0.35,0.45
                pos_hint:{"x":0.5,"y":0.15}
                text : "(x+y)>20\nOUTPUT:\nTrue (x//y)<=3\nOUTPUT:\nTrue"
                font_size : 15
            FloatLayout:
                cols : 2
                Button :
                    pos_hint:{"x":0,"y":0}
                    size_hint: 0.5, 0.15
                    text : "Back"
                    on_release :
                        app.root.current = "aop"
                        root.manager.transition.direction = "right"
                Button :
                    pos_hint: {"x":0.5,"y":0}
                    size_hint : 0.5,0.15
                    text : "What is Bitwise Operators?"
                    on_release:
                        app.root.current = "bop"
                        root.manager.transition.direction = "left"
<BitwiseOperatorWindow>
    name : "bop"
    FloatLayout:
        size: root.width, root.height
        rows:3
        Label:
            size_hint : 1,0.4
            pos_hint: {"x":0,"y":0.7}
            text:"Introduction To Bitwise Operator's"
            font_size : 20
        Label:
            size_hint : 1,0.2
            pos_hint: {"x":0,"y":0.6}
            text : "Bitwise operators act on operands as if they were string of binary digits. It operates bit by bit, hence the name.\n\nOperator        Meaning        \n&             Bitwise AND        x&y=0(0000 0000)\n|                Bitwise OR        x|y=14(0000 1110)\n~            Bitwise NOT        ~x=-11(1111 0101)\n^            Bitwise XOR        x^y=14(0000 1110)\n>>           Bitwise Right Shift        x>>2=2(0000 0010)\n<<           Bitwise Left Shift        x<<2=40(0010 1000)\n"
        Label:
            size_hint : 1,0.1
            pos_hint: {"x":0,"y":0.5}
            text : "Syntax of Bitwise operators varies with the kind of operator used as given above in the table"
        FloatLayout:
            cols:2
            Label:
                size_hint : 0.35,0.45
                pos_hint:{"x":0,"y":0.15}
                text : "Example:\nx=15; y=4\nx|y=4\nOUTPUT:\nTrue\n"
                font_size : 15
            Label :
                size_hint : 0.35,0.45
                pos_hint:{"x":0.5,"y":0.15}
                text : "x&y=15\nOUTPUT:\nFalse x^y=15\nOUTPUT:\nTrue"
                font_size : 15
            FloatLayout:
                cols : 2
                Button :
                    pos_hint:{"x":0,"y":0}
                    size_hint: 0.5, 0.15
                    text : "Back"
                    on_release :
                        app.root.current = "cop"
                        root.manager.transition.direction = "right"
                Button :
                    pos_hint: {"x":0.5,"y":0}
                    size_hint : 0.5,0.15
                    text : "What is Logical Operators?"
                    on_release:
                        app.root.current = "lop"
                        root.manager.transition.direction = "left"


<LogicalOperatorWindow>
    name: "lop"
    FloatLayout:
        size: root.width, root.height
        rows:3
        Label:
            size_hint : 1,0.4
            pos_hint: {"x":0,"y":0.7}
            text:"Introduction To Logical Operator's"
            font_size : 20
        Label:
            size_hint : 1,0.2
            pos_hint: {"x":0,"y":0.6}
            text : "Logical operators are used to compare values. It either returns True or False according to the condition.\nOperator        Meaning\n >        Greater than - True if the left operand is greater than the right\n<        Less than - True if the left operand is less than the right\n==        Equal to – True if both the operands are equal.\n>=        Greater than or equal to - True if the left operand is greater than or equal to the right.\n><=       Less than or equal to - True if the left operand is less than or equal to the right\n"
        Label:
            size_hint : 1,0.1
            pos_hint: {"x":0,"y":0.5}
            text : "Syntax of Comparison operators:\n (variable or constant<comparison operator>variable or constant. "
        FloatLayout:
            cols:2
            Label:
                size_hint : 0.35,0.45
                pos_hint:{"x":0,"y":0.15}
                text : "Example:\nx=15; y=4\n x>y\nOUTPUT:\nFalse\n"
                font_size : 15
            Label :
                size_hint : 0.35,0.45
                pos_hint:{"x":0.5,"y":0.15}
                text : "n(x+y)>20\nOUTPUT:\nTrue (x//y)<=3\nOUTPUT:\nTrue"
                font_size : 15
            FloatLayout:
                cols : 2
                Button :
                    pos_hint:{"x":0,"y":0}
                    size_hint: 0.5, 0.15
                    text : "Back"
                    on_release :
                        app.root.current = "bop"
                        root.manager.transition.direction = "right"
                Button :
                    pos_hint: {"x":0.5,"y":0}
                    size_hint : 0.5,0.15
                    text : "What is Assignment Operator?"
                    on_release:
                        app.root.current = "asop"
                        root.manager.transition.direction = "left"

<AssignmentOperatorWindow>
    name: "asop"
    FloatLayout:
        size: root.width, root.height
        rows:3
        Label:
            size_hint : 1,0.4
            pos_hint: {"x":0,"y":0.7}
            text:"Introduction To Assignment Operator's"
            font_size : 20
        Label:
            size_hint : 1,0.2
            pos_hint: {"x":0,"y":0.6}
            text : "Assignment operators are used in Python to assign values to variables.\n"
        Label:
            size_hint : 1,0.1
            pos_hint: {"x":0,"y":0.5}
            text : "Syntax of Assignment operators:\n (variable)<assignment operator>variable or constant. "
        FloatLayout:
            cols:2
            Label:
                size_hint : 0.35,0.45
                pos_hint:{"x":0,"y":0.15}
                text : "Example:\nx=15; y=4\n x>y\nOUTPUT:\nFalse\n"
                font_size : 15
            Label :
                size_hint : 0.35,0.45
                pos_hint:{"x":0.5,"y":0.15}
                text : "n(x+y)>20\nOUTPUT:\nTrue (x//y)<=3\nOUTPUT:\nTrue"
                font_size : 15
            FloatLayout:
                cols : 2
                Button :
                    pos_hint:{"x":0,"y":0}
                    size_hint: 0.5, 0.15
                    text : "Back"
                    on_release :
                        app.root.current = "lop"
                        root.manager.transition.direction = "right"
				Button :
                    pos_hint: {"x":0.5,"y":0}
                    size_hint : 0.5,0.15
                    text : "What is Identity Operators?"
                    on_release:
                        app.root.current = "iop"
                        root.manager.transition.direction = "left"


<IdentityOperatorWindow>
    name: "iop"
    FloatLayout:
        size: root.width, root.height
        rows:3
        Label:
            size_hint : 1,0.4
            pos_hint: {"x":0,"y":0.7}
            text:"Introduction To Identity Operator's"
            font_size : 23
        Label:
            size_hint : 1,0.2
            pos_hint: {"x":0,"y":0.6}
            text : "'is' and 'is not' are the identity operators in Python.\n They are used to check if two values (or variables) are located on the same part of the memory.\n Two variables that are equal does not imply that they are identical.\n"
        Label:
            size_hint : 1,0.1
            pos_hint: {"x":0,"y":0.5}
            text : "Syntax of Identity operators:\n (variable)<Identity  operator>variable or constant. "
        FloatLayout:
            cols:2
            Label:
                size_hint : 0.35,0.45
                pos_hint:{"x":0,"y":0.15}
                text : "Example:\nx=15; y=4\n  is >y\nOUTPUT:\nFalse\n"
                font_size : 15
            Label :
                size_hint : 0.35,0.45
                pos_hint:{"x":0.5,"y":0.15}
                text : "\nx+y is 20\nOUTPUT:\nTrue x is not y\nOUTPUT:\nTrue"
                font_size : 15
            FloatLayout:
                cols : 2
                Button :
                    pos_hint:{"x":0,"y":0}
                    size_hint: 0.5, 0.15
                    text : "Back"
                    on_release :
                        app.root.current = "asop"
                        root.manager.transition.direction = "right"
                Button :
                    pos_hint: {"x":0.5,"y":0}
                    size_hint : 0.5,0.15
                    text : "Let's take a TEST!!!"
                    on_release:
                        on_release : root.select()
                        root.manager.transition.direction = "left"

<Test1Window>:
    name: "test1"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n||Write the correct option you think press enter and go to next question||\n\n\nQ. Which is the correct operator for power(xy)?\na) X^y\nb) X**y\nc) X^^y\nd) None of the mentioned\n\n"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test2"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test2Window>:
    name: "test2"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. Which one of these is floor division?\na) /\nb) //\nc) %\nd) None of the mentioned\n\n"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test3"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :

                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test3Window>:
    name: "test3"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\nQ.What is the order of precedence in python?\ni) Parentheses\nii) Exponential\niii) Multiplication\niv) Division\nv) Addition\nvi) Subtraction\n\n\na) i,ii,iii,iv,v,vi\nb) ii,i,iii,iv,v,vi\nc) ii,i,iv,iii,v,vi\nd) i,ii,iii,iv,vi,v\n\n"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test4"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :

                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test4Window>:
    name: "test4"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q.What is the answer to this expression, 22 % 3 is?\na) 7\nb) 1\nc) 0\nd) 5\n\n"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test5"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test5Window>:
    name: "test5"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q.Mathematical operations can be performed on a string.\na) True\nb) False\nc)May be or maybe not \nd)Sometimes\n\n"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test11Window>:
    name: "test11"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\n\nQ. What is the output of the following assignment operator-\n\n        y = 10\n        x = y += 2\n        print(x)\n\na)  2\nb)  10\nc)  12 \nd)  Syntax Error\n\n\n"
            font_size: 20
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test22"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test22Window>:
    name: "test22"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\nQ. What is the output of print(10 - 4 * 2) :-\n\n\na)  2\nb)  10\nc)  12 \nd)  Syntax Error\n\n\n"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test33"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test33Window>:
    name: "test33"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\nQ. What is the output of the following Python code-\nx = 10\ny = 50\nif (x ** 2 > 100 and y < 100):\n      print(x, y)\n\na) 100 500 \nb) 10 50 \nc) 100 50 \nd)  None\n\n\n"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test44"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test44Window>:
    name: "test44"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\nQ. What is the output of the following code-\n\nx = 100\ny = 50\nprint(x and y)\n\na)  True\nb)  100\nc)  50 \nd)  False\n\n\n"
            font_size : 19
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test55"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test55Window>:
    name: "test55"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\n\nQ. What is the output of the following code-\n  x = 6\n  y = 2\n  print(x ** y)\n  print(x // y)\n\n  a) 66\n       0\n  b) 36\n       0\n  c)66\n       3\n  d) 36\n       3\n"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.30}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test111Window>:
    name: "test111"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nQ. What is the value of the following Python Expression\n\nprint(36 / 4)\n\na)0.9\nb) 9.0\nc) 36/4\nd) 9"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test222"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test222Window>:
    name: "test222"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\nQ. What is the output of the following addition (+) operator\n\na = [10, 20]\nb = a\nb += [30, 40]\nprint(a)\nprint(b)\n\na) [10, 20, 30, 40]\n     [10, 20, 30, 40] \nb) [10, 20]\n     [10, 20, 30, 40] "
            font_size : 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test333"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test333Window>:
    name: "test333"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\nQ. 4 is 100 in binary and 11 is 1011. What is the output of the following bitwise operators?\n\na = 4\nb = 11\nprint(a | b)\nprint(a >> 2)\n\na) 15\n     1\n\nb)14\n    1"
            font_size : 17
        TextInput :
            pos_hint:{"x":0.15,"y":0.35}
            size_hint: 0.75,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test444"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test444Window>:
    name: "test444"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\nQ.Which of the following operators has the highest precedence?\na) not\nb) and\nc) *\nd) +\n\n"
            font_size: 22
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "test555"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test555Window>:
    name: "test555"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. What is the output of the following code-\n\nprint(bool(0), bool(3.14159), bool(-3), bool(1.0+1j))\n\na) True True False True \nb) False True True True \nc) True True False True \nd)False True False True"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<FifthWindow>:
    name: "fifth"

    Button:
        text: "BACK TO CONTENTS"
        font_size : 30
        on_release:
            app.root.current = "content"
            root.manager.transition.direction = "left"

<LoopWindow>:

    name: "loop"
    GridLayout:

        rows : 3
        Label:
            text: "In this Lesson we will learn about Loops in Python"
            font_size : 20
        Label:
            text:"Loops are statements which are \nused to execute a particular statement or set of statements repeatedly withuout \nhaving to write them again and again."
            font_size: 17
        FloatLayout:
            cols:2
            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                on_release :
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

            Button:
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "for loop"
                on_release:
                    app.root.current = "FL"
                    root.manager.transition.direction = "left"

<Forloop>
	name:"FL"
	GridLayout:
		size: root.width, root.height
		rows: 3
		Label:
			text:"\nIn this lesson we will learn about for loops.\n\n for in loops are used to run a set of task for a certain number of times.\n These loops iterate over any sequences such as items in an array,range,list, \ntuples or characters in a string.\n We use this loop to do some \nrepetitive processes for a fixed amount of times.\n\n"
			font_size: 19
		Label:
			text:"Syntax: \nfor val in  sequence:\n      Body of for\n Here val is the \n variable that takes the value of the item in the given sequence on each\n iteration.The loop terminates when e reach the last item in the sequence\n\n Example:\n Problem statement - To print Hello world 100 times. \n Solution:\n\n for i in (100)\n        print(""Hello world"")"
		FloatLayout:
			cols: 2
			Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "loop"
                    root.manager.transition.direction = "right"

            Button:
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "for with else"
                on_release:
                    app.root.current = "FWE"
                    root.manager.transition.direction = "left"

<Forwithelse>
	name: "FWE"
	GridLayout:
		size: root.width,root.height
		rows: 3
		Label:
			text: "\nThis lesson is about using else statement in with the for loop. A for loop can\n have an optional 'else' block as well. The 'else' part is executed if the terms\n in the sequence used in for loop exhaust.The break keyword can also be used \nto terminate the for loop.In such cases, the else part is ignored.The else \npart of the for loop works if break does not occur.\n\n"
			font_size: 17
		Label:
			text: " Example:/ndigits=[0,1,5]\nfor i in digits:\n    print(i)\nelse:\n    print(""No items Left"")\n\nOutput:\n0n\1\n5\nNo items Left"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "FL"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "While loop"
                on_release:
                    app.root.current = "While"
                    root.manager.transition.direction = "left"

<WhileLoop>
	name: "While"
	FloatLayout:
		size: root.width,root.height
		rows: 3
		Label:
			pos_hint:{"x":0,"y":0.45}
            size_hint: 1, 0.65
			text: " In this module. We will learn about another kind of loop used in Python - \n'The while loop'.The while loop in python is used to iterate over a block of \ncode as long as the test expression(condition) is true. This loop is mostly \npreferred when we don't know the number of times to iterate beforehand.\n\nIn the whilel loop, the test expression is validated before entering the body of the loop.\n The body of the loop is entered only if the test_expression evaluates to 'True'.\n After one iteration, the test expression is validated again.\nThis process continues until the test_expression evaluatesto 'False'\n\n"
			font_size: 17
		Label:
			pos_hint:{"x":0,"y":0.10}
            size_hint: 1, 0.5
			font_size: 17
			text: " Example:\nn,sum=10,0\nwhile(n>0):\n    sum+=n\n    n-=1\nprint(sum)\n OUTPUT:55.\n\n Syntax:\n while(test_expression):\n    Body of while\n\n"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.15
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "FWE"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.15
                text: "While with else"
                on_release:
                    app.root.current = "WWE"
                    root.manager.transition.direction = "left"

<WhileWithElse>
	name:"WWE"
	GridLayout:
		size: root.width,root.height
		rows: 3
		Label:
			text: "The implementation of else block in while similar to the for loop. \nIf the condition in the while block evaluates to false, then the else part gets executed."
		Label:
			text:"Example:\n i=0\nwhile(i<3);\n    print(i)\n    i+=1\nelse:\n    Print(1111)\nOUTPUT:\n0\n1\n2\n1111"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "While"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "If....Else"
                on_release:
                    app.root.current = "ifelse"
                    root.manager.transition.direction = "left"

<IfElse>
	name: "ifelse"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "The If....Else block in python is a conditional loop. The program enters inside the\n if block only when the condition specified in the if statement is True, Otherwise,\n the else part is executed. The If.....Else loop can be used to verify conditions\n as well as to iterate over a block of statements."
		    font_size: 18
		Label:
			text:"Example:\n i=0\nif(i==0)\n    print(i)\nelse:\n\nThe point to be noted here is that even if the condition\n in the if statement is True,\n the if block will not be executed as the else block is empty.\n If can be alone used without else but else cannot be used without if."
		    font_size: 18
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "WWE"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Try Except"
                on_release:
                    app.root.current = "TC"
                    root.manager.transition.direction = "left"

<TryCatch>
	name: "TC"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "The try...except...finally block is another block of statements\n used to control the flow of the program.\n The try statement contains the block of statements for validation.\n If the try statement returns True,\n then the statements within the try block are executed otherwise,\n all the other cases are executed in the except block.\nThe except block or finally block is executed which includes the output to be shown.\n The except block and finally block can be used independent of each other."
		    font_size: 17
		Label:
			text:"Example:\n try:\n    f=open(<filename with type>,encoding-'utf-8')\nfinally:\n    f.close\n\n This type of constructor makes sure that the file is executed\n even if the exception occurs during the program execution."
		    font_size: 19
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "WWE"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Let's take a test"
                on_release:
                    app.root.current = "2final"
                    root.manager.transition.direction = "left"




<DataWindow>
    name: "data"

    Button :
        text: "lesson 3"
        font_size : 30
        on_release:
            app.root.current = "final3"
            root.manager.transition.direction = "left"

<FunctionWindow>:

    name: "function"

    Button :
        text: "Functions:"
        font_size : 30
        on_release:
            app.root.current = "def1"
            root.manager.transition.direction = "left"

<DataHandlingWindow>:

    name: "datahandling"

    Button :
        text: "lesson 5"
        font_size : 30
        on_release:
            app.root.current = "D"
            root.manager.transition.direction = "left"

<AppWindow>:

    name: "app"

    Button :
        text: "lesson 6"
        font_size : 30
        on_release:
            app.root.current = "app2"
            root.manager.transition.direction = "left"

<tFinalWindow>:
    name: "2final"
    Button :
        text : "PRESS TO START TEST"
        font_size : 30
        on_release:
            on_release : root.select()
            root.manager.transition.direction = "left"

<FinalWindow3>:
    name: "final3"
    Button :
        text : "PRESS TO START TEST"
        font_size : 30
        on_release:
            on_release : root.select()
            root.manager.transition.direction = "left"


<FinalWindow4>:
    name: "final4"
    Button :
        text : "Press to start test"
        font_size : 30
        on_release:
            on_release : root.select()
            root.manager.transition.direction = "left"
<FinalWindow5>:
    name: "final5"
    Button :
        text : "Press to start test"
        font_size : 30
        on_release:
            on_release : root.select()
            root.manager.transition.direction = "left"

<FinalWindow6>:
    name: "final6"
    Button :
        text : "Test Yourself!!!"
        font_size : 30
        on_release:
            on_release : root.select()
            root.manager.transition.direction = "left"
<tTest1Window>:
    name: "2test1"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\n for loops in python work on____\na)range\nb)Both, iteration and range\nc)Iteration\nNOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test2"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<tTest2Window>:
    name: "2test2"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nfor i in range(-3). How many times will this loop run?\na)1\nb)0\nInfinite\nd)Error"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test3"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<tTest3Window>:
    name: "2test3"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nFor loop in python is___\na)Entry Controlled\nb)Exit controlled\nc)Simple loop\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test4"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<tTest4Window>:
    name: "2test4"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nIn which of the following loop in Python,we can check the condition?\na)for\nb)while\nc)if....else\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test5"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<tTest5Window>:
    name: "2test5"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nIs it possible to create a loop using goto statement?\na)YES\nb)NO\nc)Sometimes\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<tTest11Window>:
    name: "2test11"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nTo break the inifinite loop, which statement is used?\na)continue\nb)break\nc)Exit\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test22"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest22Window>:
    name: "2test22"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nWhat is the value of i after this- for i in range(3)?\na)1\nb)2\nc)0\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test33"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest33Window>:
    name: "2test33"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nWhat do we put at the end of the statement of opening a loop?\na)coloc\nb)semicolon\nc)comma\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test44"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest44Window>:
    name: "2test44"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nWhich is an inifinite loop?\na)while(infinite)\nb)while(1):\nc)for(1):\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test55"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest55Window>:
    name: "2test55"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nWhich of the following is an exit controlled loop?\na)while loop\nb)None\nc)do while loop\nd)for loop"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest111Window>:
    name: "2test111"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nWhile(0): how many will the loop run?\na)3\nb)0\nc)1\nd)2"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test222"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest222Window>:
    name: "2test222"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nFor loop in python is___\na)1\nb)0\nc)2\nd)3"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test333"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest333Window>:
    name: "2test333"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nwhile(1==3): . How many times will this loop run?\na)0\nb)1\nc)infinite\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test444"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest444Window>:
    name: "2test444"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nWhat is the output of the following code?\nx = ['ab', 'ab']\nfor i in x:\n    i.upper()\nprint(x)\na)['AB','AB']\nb)['ab','ab']\nc)[None,None]\nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "2test555"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<tTest555Window>:
    name: "2test555"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "||Type the option in the text box give||\nWhat is the output of the following code?\ni = 1\nwhile True:\n    if i%3 == 0:\n        break\n    print(i)\n    i + = 1\na)1 2\nb)error\nc)1 2 3 \nd)NOTA"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test1Window3>:
    name: "3test1"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "3.1"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test2"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test2Window3>:
    name: "3test2"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "3.2"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test3"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test3Window3>:
    name: "3test3"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "3.3"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test4"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test4Window3>:
    name: "3test4"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "3.4"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test5"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test5Window3>:
    name: "3test5"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "3.5"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test11Window3>:
    name: "3test11"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "3.11"
            font_size: 20
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test22"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test22Window3>:
    name: "3test22"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "3.22"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test33"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test33Window3>:
    name: "3test33"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\nQ. What is the output of the following Python code-\nx = 10\ny = 50\nif (x ** 2 > 100 and y < 100):\n      print(x, y)\n\na) 100 500 \nb) 10 50 \nc) 100 50 \nd)  None\n\n\n"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test44"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test44Window3>:
    name: "3test44"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\nQ. What is the output of the following code-\n\nx = 100\ny = 50\nprint(x and y)\n\na)  True\nb)  100\nc)  50 \nd)  False\n\n\n"
            font_size : 19
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test55"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test55Window3>:
    name: "3test55"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\n\nQ. What is the output of the following code-\n  x = 6\n  y = 2\n  print(x ** y)\n  print(x // y)\n\n  a) 66\n       0\n  b) 36\n       0\n  c)66\n       3\n  d) 36\n       3\n"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.30}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test111Window3>:
    name: "3test111"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "3.111"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test222"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test222Window3>:
    name: "3test222"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\nQ. What is the output of the following addition (+) operator\n\na = [10, 20]\nb = a\nb += [30, 40]\nprint(a)\nprint(b)\n\na) [10, 20, 30, 40]\n     [10, 20, 30, 40] \nb) [10, 20]\n     [10, 20, 30, 40] "
            font_size : 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test333"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test333Window3>:
    name: "3test333"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n\nQ. 4 is 100 in binary and 11 is 1011. What is the output of the following bitwise operators?\n\na = 4\nb = 11\nprint(a | b)\nprint(a >> 2)\n\na) 15\n     1\n\nb)14\n    1"
            font_size : 17
        TextInput :
            pos_hint:{"x":0.15,"y":0.35}
            size_hint: 0.75,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test444"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test444Window3>:
    name: "3test444"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\nQ.Which of the following operators has the highest precedence?\na) not\nb) and\nc) *\nd) +\n\n"
            font_size: 22
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "3test555"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test555Window3>:
    name: "3test555"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. What is the output of the following code-\n\nprint(bool(0), bool(3.14159), bool(-3), bool(1.0+1j))\n\na) True True False True \nb) False True True True \nc) True True False True \nd)False True False True"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test1Window4>:
    name: "4test1"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q.What is the output of the add() function call?\n\ndef add(a, b):\n    return a+5, b+5\nresult = add(3, 2)\nprint(result)\n\na)15\nb)8\nc)(8,7)\nd)Syntax error"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test2"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test2Window4>:
    name: "4test2"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. What is the output of the following code\n\ndef outerFun(a, b):\n    def innerFun(c, d):\n        return c + d\n    return innerFun(a, b)\nres = outerFun(5, 10)\nprint(res)\n\na)15\nb)Syntax Error\nc)(5, 10)"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test3"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test3Window4>:
    name: "4test3"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. What is the output of the following function call\ndef fun1(num):\n    return num + 25\nfun1(5)\nprint(num)\na)25\nb)5\nc)NameError"
            font_size : 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test4"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test4Window4>:
    name: "4test4"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q.Which one is True:\n\na) A Python function can return only a single value\n\nb) A function can take an unlimited number of arguments.\n\nc) Python function does not return anything unless and until you add a return statement"
            font_size : 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test5"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test5Window4>:
    name: "4test5"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. Given the following function fun1() Please select the correct function calls\n\ndef fun1(name, age):\n    print(name, age)\n\na) fun1(name='Emma', age=23)\nb) fun1(name='Emma', 23)\nc) fun1('Emma', 23)"
            font_size : 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test11Window4>:
    name: "4test11"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. What is the output of the following function call\n\ndef fun1(name, age=20):\n    print(name, age)\nfun1('Emma', 25)\n\na)Emma 25\n\nb)Emma 20"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test22"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test22Window4>:
    name: "4test22"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q.Choose the correct function declaration of  fun1()\n\nfun1(25, 75, 55)\n\nfun1(10, 20)\n\na) def fun1(**kwargs)\nb) No, it is not possible in Python\nc) def fun1(args*)\nd) def fun1(*data) "
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test33"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test33Window4>:
    name: "4test33"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.55}
            size_hint: 1, 0.25
            text : "Q. What is the output of the following display() function call\n\ndef display(**kwargs):\n    for i in kwargs:\n        print(i)\na) display(emp=\"Kelly\", salary=9000)\n   TypeError\nb) Kelly\n    9000\nc) ('emp', 'Kelly')\n    ('salary', 9000)\nd)emp\n   salary"
            font_size: 17
        TextInput :
            pos_hint:{"x":0.25,"y":0.28}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test44"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test44Window4>:
    name: "4test44"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. Python function always returns a value:\n\na)False\n\nb)True"
            font_size : 19
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test55"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test55Window4>:
    name: "4test55"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.55}
            size_hint: 1, 0.25
            text : "Q. What is the output of the following function call\n\ndef outerFun(a, b):\n    def innerFun(c, d):\n        return c + d\n    return innerFun(a, b)\n    return a\nresult = outerFun(5, 10)\nprint(result)\na)5\nb)15\nc)(15, 5)\nd)Syntax Error"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.30}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test111Window4>:
    name: "4test111"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. What is the output of the following displayPerson() function call\n\ndef displayPerson(*args):\n    for i in args:\n        print(i)\ndisplayPerson(name=\"Emma\", age=\"25\")\na) TypeError\nb) Emma\n  25\nc) name\n   age"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test222"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test222Window4>:
    name: "4test222"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. Which of the following is the use of function in python?\n\na) Functions are reusable pieces of programs\nb) Functions don't provide better modularity for your application\nc) you can't also create your own functions\nd) All of the mentioned"
            font_size : 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test333"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test333Window4>:
    name: "4test333"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. Which keyword is used for function?\n\na) Fun\nb) Define\nc) Def\nd) Function"
            font_size : 19
        TextInput :
            pos_hint:{"x":0.15,"y":0.35}
            size_hint: 0.75,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test444"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test444Window4>:
    name: "4test444"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "4. What is called when a function is defined inside a class?\n\nA. class\nB. function\nC. method\nD. module"
            font_size: 22
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "4test555"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test555Window4>:
    name: "4test555"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q. If return statement is not used inside the function, the function will return:\n\nA. None\nB. 0\nC. Null\nD. Arbitary value"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test1Window5>:
    name: "5test1"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following command is used to open a file\n “c:\temp.txt” in read-mode only?\nA. infile = open(“c:\temp.txt”, “r”)\nB. infile = open(“c:\\temp.txt”, “r”)\nC. infile = open(file = “c:\temp.txt”, “r+”)\nD. infile = open(file = “c:\\temp.txt”, “r+”)"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test2"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test2Window5>:
    name: "5test2"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following command is used to open a file “c:\temp.txt” in write-mode only?\nA. outfile = open(“c:\temp.txt”, “w”)\nB. outfile = open(“c:\\temp.txt”, “w”)\nC. outfile = open(file = “c:\temp.txt”, “w+”)\nD. outfile = open(file = “c:\\temp.txt”, “w+”)"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test3"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test3Window5>:
    name: "5test3"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following command is used to open a file “c:\temp.txt” in append-mode?\nA. outfile = open(“c:/temp.txt”, “a”)\nB. outfile = open(“c:\\temp.txt”, “rw”)\nC. outfile = open(“c:\temp.txt”, “w+”)\nD. outfile = open(“c:\\temp.txt”, “r+”)\nE. outfile = open(“c:\\temp.txt”, “a”)"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test4"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test4Window5>:
    name: "5test4"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following statements are true regarding the opening modes of a file?\nA.When you open a file for writing, if the file does not exist, an error occurs. \nB.When you open a file for reading, if the file does not exist, an error occurs.\nC. When you open a file for reading, if the file does not exist, the program will open an empty file.\nD. When you open a file for writing, if the file does not exist, a new file is created.\nE. When you open a file for writing, if the file exists, the existing file is overwritten with the new file."
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test5"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test5Window5>:
    name: "5test5"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following commands can be used to read “n” number\nof characters from a file using the file object <file>?\nA.n = file.read()\nB.  file.read(n)\nC. file.readline(n)\nD. file.readlines()"
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test11Window5>:
    name: "5test11"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following commands can be used to read the entire contents of a file as a string using the file object <tmpfile>?\nA. tmpfile.read(n)\nB. tmpfile.read()\nC. tmpfile.readline()\nD. tmpfile.readlines()"
            font_size: 20
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test22"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test22Window5>:
    name: "5test22"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following commands can be used to read the\nnext line in a file using the file object <tmpfile>?\nA. tmpfile.read(n)\nB. tmpfile.readline()\nC. tmpfile.read()\nD. tmpfile.readlines()"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test33"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test33Window5>:
    name: "5test33"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following commands can be used to read the\nremaining lines in a file using the file object <tmpfile>?\nA. tmpfile.readlines()\nB. tmpfile.read()\nC. tmpfile.readline()\nD. tmpfile.read(n)"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test44"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test44Window5>:
    name: "5test44"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhat does the <readlines()> method returns?\nA. str\nB. a list of lines\nC. list of single characters\nD. list of integers"
            font_size : 19
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test55"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test55Window5>:
    name: "5test55"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following functions can be used to check if a file “logo” exists?\nA. os.path.isFile(logo)\nB. os.path.isfile(logo)\nC. os.path.exists(logo)\nD. os.isFile(logo)"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.30}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test111Window5>:
    name: "5test111"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following functions displays a file dialog for opening\nan existing file?\nA. tmpfile = asksaveasfilename()\nB. tmpfile = askopenfilename()\nC. tmpfile = openfilename()\nD. tmpfile = saveasfilename()"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test222"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test222Window5>:
    name: "5test222"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following functions displays a file dialog for saving a file?\nA. tmpfile = askopenfilename()\nB. tmpfile = asksaveasfilename()\nC. tmpfile = openfilename()\nD. tmpfile = saveasfilename()"
            font_size : 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test333"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test333Window5>:
    name: "5test333"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\n Which of the following command is used to open a file “c:\temp.txt”\nfor writing in binary format only?\nA.outfile = open(“c:\\temp.txt”, “wb”)\nB. outfile = open(“c:\temp.txt”, “w”)\nC. outfile = open(“c:\temp.txt”, “w+”)\nD. outfile = open(“c:\\temp.txt”, “wb+”)"
            font_size : 17
        TextInput :
            pos_hint:{"x":0.15,"y":0.35}
            size_hint: 0.75,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test444"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test444Window5>:
    name: "5test444"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following command is used to open a file\n“c:\temp.txt” for reading in binary format only?\nA. outfile = open(“c:\temp.txt”, “r”)\nB. outfile = open(“c:\\temp.txt”, “rb”)\nC. outfile = open(“c:\temp.txt”, “r+”)\nD. outfile = open(“c:\\temp.txt”, “rb+”)"
            font_size: 22
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "5test555"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<Test555Window5>:
    name: "5test555"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "\n\n\n\nWhich of the following functions do you use to write data in the binary format?\nA. write\nB. dump\nC. output\nD. send"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "fifth"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test1Window6>:
    name: "6test1"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.55}
            size_hint: 1, 0.25
            text : "Q.What is the Output of this Code?\n\na,b=1,0\na=a^b\nb=a^b\na=a^b\nprint(a)\n\na)0\nb)1\nc)2\nd)Runtime error"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.3}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "6test2"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test2Window6>:
    name: "6test2"

    answer : answer
    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q.Polymorphism is when a subclass can modify the behavior of its superclass.\n\na)False\nb)true\nc)Depends on the Content of class\nd)Invalid question"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "6test3"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test3Window6>:
    name: "6test3"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q.What will this code print?\n\nfrom random import randint\nfor i in range(5):\n     print(random(1,5))\n\na) This code raises an exception \nb) Five random Numbers in between 1 to 4\nc)Five random Numbers in between 1 to 5 \nd)Five random integers in between 1 to 4"
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.35}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "6test4"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test4Window6>:
    name: "6test4"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Select the incorrect statements:\nI. Constructors cannot return values\nII. The __bases__ attribute will give you the names of the direct parent classes\nIII. issubclass(A, B) returns True if A is an object derived from class B\nIV. Function overloading is an effective way to implement polymorphism in Python\n\na) 1 and 3    b) 2 and 3      c) 3 and 4     d) 1,2 and 4 "
            font_size: 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "6test5"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"

<Test5Window6>:
    name: "6test5"

    answer : answer

    FloatLayout:
        size : root.height, root.width
        rows:3
        Label:
            pos_hint:{"x":0,"y":0.65}
            size_hint: 1, 0.25
            text : "Q.How will you open a file for reading as a text file?\n\na)open('file.txt')\nb)open('file.txt', 'w')\nc)open('file.txt', 'b')\nd) None of the above"
            font_size : 18
        TextInput :
            pos_hint:{"x":0.25,"y":0.45}
            size_hint: 0.55,0.10
            id : answer
            multiline : False
        FloatLayout:
            rows : 2

            Button :
                pos_hint: {"x":0,"y":0.1}
                size_hint : 1,0.15
                text : "NEXT"
                on_release:
                    root.get_text_inputs()
                    app.root.current = "app7"
                    root.manager.transition.direction = "left"


            Button:
                pos_hint:{"x":0,"y":0}
                size_hint: 1, 0.1
                text: "Cancel Test Move out"
                on_release :
                    root.zero()
                    app.root.current = "content"
                    root.manager.transition.direction = "right"


<App2Window>

    name: "app2"

    FloatLayout:
        rows: 3
        size : root.height, root.width
        FloatLayout:
            cols: 2
            Label:
                pos_hint:{"x":0,"y":0.8}
                size_hint: 0.1, 0.20
                text : "   "
                font_size: 65
            Label:
                pos_hint:{"x":0.000000001,"y":0.78}
                size_hint: 1, 0.20
                text : "Python Learning----------------------------------------------------------------------------------"
                font_size: 25
        Label:
            pos_hint:{"x":0,"y":0.25}
            size_hint: 1, 0.50
            text : "So, this far we have learnt a few of the many properties and concepts of Python\nsome of them are:-\n      1) Basic syntax\n\n       2) Usage of Loops\n\n       3) Various data  structures\n\n       4) About If/Else conditions\n\n       5) Functions\n\nMuch more..."
            font_size: 21
        Button:
            pos_hint:{"x":0,"y":0}
            size_hint: 1, 0.20
            text : "Now, Let's see if we can Apply these concepts to develop Executable Programs..."
            font_size: 19
            on_release:
                app.root.current = "app3"
                root.manager.transition.direction = "left"

<App3Window>
    name: "app3"

    FloatLayout:
        size: root.width , root.height
        rows: 5
        Label:
            pos_hint:{"x":0,"y":0.8}
            size_hint: 0.5, 0.20
            text : "So let's start with some simple programs.\nTry Understanding and executing these codes-"
            font_size: 18
        FloatLayout:
            cols : 2
            Label :
                pos_hint:{"x":0,"y":0.7}
                size_hint: 0.5, 0.20
                text : "Adding two number provided by user input-"
                font_size: 18
            Label :
                pos_hint:{"x":0.5,"y":0.7}
                size_hint: 0.5, 0.20
                text : "Finding Factorial of given number-"
                font_size: 18
        FloatLayout:
            cols : 2
            Label :
                pos_hint:{"x":0,"y":0.5}
                size_hint: 0.5, 0.20
                text : "number1 = int(input(\"First number: \"))\n number2 = int(input(\"\nSecond number: \"))\nsum = number1 + number2\n print(sum)\nOutput Expected to be sum value"
                font_size: 18
            Label :
                pos_hint:{"x":0.5,"y":0.43}
                size_hint: 0.5, 0.20
                text: "# To take input from the user\n#num = int(input(\"Enter a number: \"))\nfactorial = 1\n# check if the number is negative, positive or zero\nif num < 0:\n   print(\"factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)"
                font_size: 16
        Button:
            pos_hint:{"x":0,"y":0.1}
            size_hint: 1, 0.10
            text : "Next"
            font_size: 19
            on_release:
                app.root.current = "app4"
                root.manager.transition.direction = "left"
        Button:
            pos_hint:{"x":0,"y":0}
            size_hint: 1, 0.10
            text : "Back"
            font_size: 19
            on_release:
                app.root.current = "content"
                root.manager.transition.direction = "right"



<App4Window>
    name: "app4"

    FloatLayout:
        size: root.width , root.height
        rows: 5
        Label:
            pos_hint:{"x":0,"y":0.85}
            size_hint: 0.8, 0.20
            text : "Let's try some more complex problems\nTry these codes on your own before looking on the given codes"
            font_size: 17
        FloatLayout:
            cols : 2
            Label :
                pos_hint:{"x":0,"y":0.73}
                size_hint: 0.5, 0.20
                text : "Checking if a string is palindrome or not-"
                font_size: 19
            Label :
                pos_hint:{"x":0.5,"y":0.73}
                size_hint: 0.5, 0.20
                text : "Checking for Armstrong no.-"
                font_size: 19
        FloatLayout:
            cols : 2
            Label :
                pos_hint:{"x":0,"y":0.5}
                size_hint: 0.5, 0.20
                text : "my_str = input(\"Enter String:\")\n# make it suitable for caseless comparison\nmy_str = my_str.casefold()\n# reverse the string\nrev_str = reversed(my_str)\n# check if the string is equal to its reverse\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")"
                font_size: 18
            Label :
                pos_hint:{"x":0.5,"y":0.43}
                size_hint: 0.5, 0.20
                text: "num = input(\"Enter number:\")\n# and calculated the length (number of digits)\norder = len(str(num))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** order\n   temp //= 10\n# display the result\nif num == sum:\n   print(num,\"is an Armstrong number\")\nelse:\n   print(num,\"is not an Armstrong number\")"
                font_size: 16
        Button:
            pos_hint:{"x":0,"y":0.1}
            size_hint: 1, 0.10
            text : "Next"
            font_size: 19
            on_release:
                app.root.current = "app5"
                root.manager.transition.direction = "left"
        Button:
            pos_hint:{"x":0,"y":0}
            size_hint: 1, 0.10
            text : "Back"
            font_size: 19
            on_release:
                app.root.current = "app3"
                root.manager.transition.direction = "right"


<App5Window>
    name: "app5"

    FloatLayout:
        size: root.width , root.height
        rows: 5
        Label:
            pos_hint:{"x":0,"y":0.8}
            size_hint: 0.5, 0.20
            text : "Few more examples:"
            font_size: 18
        FloatLayout:
            cols : 2
            Label :
                pos_hint:{"x":0,"y":0.7}
                size_hint: 0.5, 0.20
                text : "Sort words in Alphabetical Order:"
                font_size: 18
            Label :
                pos_hint:{"x":0.5,"y":0.7}
                size_hint: 0.5, 0.20
                text : "Fibonnaci Sequence Using Recursion:"
                font_size: 18
        FloatLayout:
            cols : 2
            Label :
                pos_hint:{"x":0,"y":0.5}
                size_hint: 0.55, 0.20
                text : "\nmy_str = \"Hello this Is an Example With cased letters\"\n# To take input from the user\n#my_str = input(\"Enter a string: \")\n# breakdown the string into a list of words\nwords = my_str.split()\n# sort the list\nwords.sort()\n# display the sorted words\nprint(\"The sorted words are:\")\nfor word in words:\n   print(word)"
                font_size: 16
            Label :
                pos_hint:{"x":0.5,"y":0.43}
                size_hint: 0.5, 0.20
                text: "def recur_fibo(n):\n   if n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\nnterms = 10\n# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Plese enter a positive integer\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(recur_fibo(i))"
                font_size: 16
        Button:
            pos_hint:{"x":0,"y":0.1}
            size_hint: 1, 0.10
            text : "Next"
            font_size: 19
            on_release:
                app.root.current = "app6"
                root.manager.transition.direction = "left"
        Button:
            pos_hint:{"x":0,"y":0}
            size_hint: 1, 0.10
            text : "Back"
            font_size: 19
            on_release:
                app.root.current = "app4"
                root.manager.transition.direction = "right"



<App6Window>
    name: "app6"

    FloatLayout:
        size: root.width , root.height
        rows: 4
        Label:
            pos_hint:{"x":0,"y":0.85}
            size_hint: 0.5, 0.20
            text : "The Last Example:"
            font_size: 20
        Label:
            pos_hint:{"x":0,"y":0.45}
            size_hint: 1, 0.20
            text : "Matrix Multiplication using Nested Loops\n# 3x3 matrix\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n# 3x4 matrix\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n# result is 3x4\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nfor r in result:\n   print(r)"
            font_size: 16
        Button:
            pos_hint:{"x":0,"y":0.1}
            size_hint: 1, 0.08
            text : "Let's Test You One More Time:"
            font_size: 19
            on_release:
                app.root.current = "6test1"
                root.manager.transition.direction = "left"
        Button:
            pos_hint:{"x":0,"y":0}
            size_hint: 1, 0.10
            text : "Back"
            font_size: 19
            on_release:
                app.root.current = "app5"
                root.manager.transition.direction = "right"

<App7Window>
    name: "app7"

    FloatLayout:
        rows : 4
        size: root.width , root.height
        Label:
            pos_hint:{"x":0,"y":0.8}
            size_hint: 1,0.2
            text: "CONGRATULATIONS"
            font_size: 30
        Label:
            pos_hint:{"x":0,"y":0.7}
            size_hint: 1,0.2
            text: "You have successfully completed this course."
            font_size: 20
        Label:
            pos_hint:{"x":0,"y":0.2}
            size_hint: 1,0.7
            text: "we will leave you with these set of problems you could brain storm in:\n\nPython Program to Find Sum of Natural Numbers Using Recursion\nPython Program to Find Factorial of Number Using Recursion\nPython Program to Convert Decimal to Binary Using Recursion\nPython Program to Add Two Matrices\nPython Program to Transpose a Matrix\nPython Program to Remove Punctuations From a String\nPython Program to Sort Words in Alphabetic Order\nPython Program to Illustrate Different Set Operations\nPython Program to Count the Number of Each Vowel\nPython Program to Merge Mails\nPython Program to Find the Size (Resolution) of a Image\nPython Program to Find Hash of File"
            font_size: 15
        Button:
            pos_hint:{"x":0,"y":0}
            size_hint: 1,0.2
            text: "THANK YOU!!!"
            font_size: 20
            on_release :
                app.root.current = "content"

<AWindow>
    name : "def1"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.82}
            font_size : 24
            text: "What is Function?"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 19
            text :"\n\n\n\nIn Python, a function is a group of related statements\n that performs a specific task.Functions\nhelp break our program into smaller and modular chunks.\n As our program grows larger and larger, functions\nmake it more organized and manageable.\nFurthermore, it avoids repetition and makes the code reusable.\n\n "
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back to Content!"
                on_release :
                    app.root.current = "content"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Next"
                on_release:
                    app.root.current = "def2"
                    root.manager.transition.direction = "left"
<A2Window>
    name : "def2"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.82}
            font_size : 24
            text: "Types of Functions"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\nBasically, we can divide functions into the following two types:\n\n1.Built-in functions - Functions that are built into Python.\neg:-\nprint(),input(),len()etc.\n\n2.User-defined functions - Functions defined by the users themselves.\neg:-\ndef greet(name):\nprint(\"Hello, \" + name + \". Good morning!\")\n"
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back"
                on_release :
                    app.root.current = "def1"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Next"
                on_release:
                    app.root.current = "def3"
                    root.manager.transition.direction = "left"
<A3Window>
    name : "def3"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.92}
            font_size : 24
            text: "How to call a function in python?"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\nOnce we have defined a function, we can call it from another function,\n program or even the Python prompt.\n To call a function we simply type the function name with appropriate parameters.\nExample:-\n\ndef greet(name):\n\"\"\"This function greets to the person passed in as a parameter\"\"\"\nprint(\"Hello, \" + name + \". Good morning!\")\ngreet('Paul')\n"
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "def1"
                on_release :
                    app.root.current = "Back"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Some Common Terms:"
                on_release:
                    app.root.current = "def4"
                    root.manager.transition.direction = "left"
<A4Window>
    name : "def4"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.82}
            font_size : 24
            text: "The return statement"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 19
            text :"\n\n\nThe return statement is used to exit a function\n and go back to the place from where it was called.\nThis statement can contain an expression that gets evaluated\n and the value is returned. If there is no\nexpression in the statement or the return statement\n itself is not present inside a function, then the function\nwill return the None object.\n\nreturn [expression_list]\n"
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back"
                on_release :
                    app.root.current = "def3"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Let's Take a Test:"
                on_release:
                    app.root.current = "final4"
                    root.manager.transition.direction = "left"

<DWindow>
    name : "D"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.92}
            font_size : 24
            text: "File Handling in Python"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\nWe use open () function in Python to open a file in read or \nwrite mode. As explained above, open ( ) will return a \nfile object. To return a file object we use open() func\ntion along with two arguments, that accepts file name and\n the mode, whether to read or write. So, the syntax\n being: open(filename, mode). There are three kinds of mode\n, that Python provides and how files can be\n opened:\n'' r '', for reading.\'' w'', for writing.\n'' a'', for appending.\n'' r+ '', for both reading and writing"
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back to Content!"
                on_release :
                    app.root.current = "content"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "NEXT"
                on_release:
                    app.root.current = "D1"
                    root.manager.transition.direction = "left"
<D1Window>
    name : "D1"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.72}
            font_size : 24
            text: "Working of read() mode"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\nThere is more than one way to read a file in Python. If\n you need to extract a string that contains all\n characters in the file then we can use file.\nread(). The full code would work like this:\nfile = open(\"file.text\", \"r\")\nprint file.read() "
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back"
                on_release :
                    app.root.current = "D"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "NEXT"
                on_release:
                    app.root.current = "D2"
                    root.manager.transition.direction = "left"
<D2Window>
    name : "D2"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.82}
            font_size : 24
            text: "Creating a file using write() mode"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\nLet's see how to create a file and how write mode works:\nTo manipulate the file, write the following in your Python environment:\nfile = open('geek.txt','w') \nfile.write(\"This is the write command\") \nfile.write(\"It allows us to write in a particular file\") \nfile.close() "
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back"
                on_release :
                    app.root.current = "D1"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "NEXT"
                on_release:
                    app.root.current = "D3"
                    root.manager.transition.direction = "left"
<D3Window>
    name : "D3"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.82}
            font_size : 24
            text: "Working of append() mode"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\nLet's see how the append mode works:\n\nfile = open('geek.txt','a') \nfile.write(\"This will add this line\") \nfile.close() "
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back"
                on_release :
                    app.root.current = "D2"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "NEXT"
                on_release:
                    app.root.current = "D4"
                    root.manager.transition.direction = "left"
<D4Window>
    name : "D4"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.82}
            font_size : 24
            text: "Using write along with with() function"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\nWe can also use write function along with with() function:\nwith open(\"file.txt\", \"w\") as f:\nf.write(\"Hello World!!!\")"
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back"
                on_release :
                    app.root.current = "D3"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Some Common Terms:"
                on_release:
                    app.root.current = "D5"
                    root.manager.transition.direction = "left"
<D5Window>
    name : "D5"
    FloatLayout :
        size: root.width, root.height
        rows: 3
        Label:
            size_hint : 1,0.04
            pos_hint : {"x":0,"y":0.82}
            font_size : 24
            text: "split() using file handling"
        Label:
            size_hint: 1, 0.88
            pos_hint: {"x":0, "y":0.15}
            font_size: 18
            text :"\n\n\nWe can also split lines using file handling in Python.\n This splits the variable when space is encountered. You can\n also split using any characters as we wish. Here is the code:\nwith open(\"file.text\", \"r\") as file: \ndata = file.readlines()\nfor line in data: \nword = line.split() \nprint word "
        FloatLayout:
            cols : 2
            Button :
                pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.14
                text : "Back to Content!"
                on_release :
                    app.root.current = "content"
                    root.manager.transition.direction = "right"
            Button :
                pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.14
                text : "Let's take a test:"
                on_release:
                    app.root.current = "final5"
                    root.manager.transition.direction = "left"



<DS>
	name: "DS"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Data structures are an efficient way to store the information in a structured way.\n They help find the appropriate data faster and in an efficient manner.\n"
		Label:
			text:"We will discuss the following basic data structures commonly used in Python:\n1.Heap Data Structure\n2.Lists\n3.Tuples4.Dictionaries\n5.Arrays\n6.Stacks\n7.Queues"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back to contents"
                font_size: 17
                on_release :
                    app.root.current = "content"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Heap DS"
                on_release:
                    app.root.current = "heap"
                    root.manager.transition.direction = "left"

<HeapDS>
	name: "HDS"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "In this tutorial, you will learn what heap data structure is. \nAlso, you will find working examples of heap operations in Python."
		Label:
			text:"Heap data structure is a complete binary tree that satisfies the heap property. It is also called as a binary heap.\n A complete binary tree is a special binary tree in which:\n    o every level, except possibly the last, is filled\n    o all the nodes have two children except the leaf nodes."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "DS"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "What is a node?"
                on_release:
                    app.root.current = "nodes"
                    root.manager.transition.direction = "left"

<Nodeinfo>
	name: "nodes"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Node is nothing but a vertex of a binary tree. Below mentioned are the types of nodes."
		Label:
			text:"Node- Vertex\n\nChild- The node which is attached to a node above it.\n\nParent- A node which has one or more nodes attached below it.\n\n Leaf node- The node(s) at the lowermost point of the tree.\n\nRoot node- The topmost node of the tree\subtree."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "HDS"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Heap Operations"
                on_release:
                    app.root.current = "heap"
                    root.manager.transition.direction = "left"

<Heap>
	name: "heap"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Heapify - It is the process of creating a heap data structure from a binary tree.\n It is used to create a Min-Heap or a Max-Heap.\n A min heap has the root node as the smallest and in the max heap the root node is the greatest."
		Label:
			text:"We will create a min heap.\n\n1.Let the input array be - |3|9|2|1|4|5|\n\n2.Create a simple binary tree from the array \n -----a binary tree is a tree having atmost two children nodes for every parent node.-----\n\n3.Start from the first index of non-leaf node whose index is given by n/2-1.\n\n4.Set current element i as largest.\n\n5.The index of left child is given by 2i + 1 and the right child is given by 2i + 2.\nIf leftChild is greater than currentElement (i.e. element at ith index), set leftChildIndex as largest.\nIf rightChild is greater than element in largest, set rightChildIndex as largest.\n\n6.Swap the largest with the currentElement.\n\n7.Repeat steps 2-7 until the subtrees are also heapified."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "nodes"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Deleting an element from heap"
                on_release:
                    app.root.current = "DFH"
                    root.manager.transition.direction = "left"

<Deletion>
	name: "DFH"
	GridLayout:
		size: root.height,root.width
		rows: 2
		Label:
			text: "To delete any node from the heap:\n\n1.Select the element to be deleted.\n\n2.Swap it with the last element.\n\n3.Remove the last element.\n\n4.Heapify the tree."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "heap"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Peek"
                on_release:
                    app.root.current = "peek"
                    root.manager.transition.direction = "left"

<Peek>
	name:"peek"
	GridLayout:
		size: root.height,root.width
		rows: 2
		Label:
			text: "Peek operation returns the maximum element from Max Heap or minimum element from Min Heap without deleting the node."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "DFH"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Extract"
                on_release:
                    app.root.current = "extract"
                    root.manager.transition.direction = "left"

<Extract>
	name:"extract"
	GridLayout:
		size: root.height,root.width
		rows: 2
		Label:
			text: "Extract-Max returns the node with maximum value after removing it from a Max Heap whereas Extract-Min returns the node with minimum after removing it from Min Heap."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release:
                    app.root.current = "peek"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Applications of Heap Data Structure"
                on_release:
                    app.root.current = "appl"
                    root.manager.transition.direction = "left"

<Applications>
	name:"appl"
	GridLayout:
		size: root.height,root.width
		rows: 2
		Label:
			text: "Heap Data Structure Applications:\n    o Heap is used while implementing a priority queue.\n   o Dijkstra's Algorithm\n    o Heap Sort."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release:
                    app.root.current = "extract"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "List Data Structures"
                on_release:
                    app.root.current = "lists"
                    root.manager.transition.direction = "left"

<List>
	name:"lists"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Python offers a range of compound data types often referred to as sequences. \nList is one of the most frequently used and very versatile data types used in Python.\n\nIn this article, we'll learn everything about Python lists, how they are \ncreated, slicing of a list, adding or removing elements from them and so on.\nList is the data structure in which multiple data types can be stored and retreived by just searching for the index of the particular element."
		Label:
			text:"In Python programming, a list is created by placing all the items (elements) inside square brackets [], separated by commas.\nExample:\nmy_list = [1, ""Hello"", 3.4]\nIt does not have any limitation to the number of elements to be stored.\nA list can also have another list as an item- nested list.\nExample:\nmy_list = [""mouse"", [8, 4, 6], ['a']]"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release:
                    app.root.current = "appl"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "How to access the elements of a list?"
                on_release:
                    app.root.current = "accesslist"
                    root.manager.transition.direction = "left"

<AccessList>
	name: "accesslist"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "To access an individual element we can simply use index operator- [].\nIn Python, the index stars from 0. So, in a list containing 5 elements, the indices will be from 0 to 4.\nTrying to access any element beyond this range (before or after) eill lead to an error."
		Label:
			text:"Negative indexing- in a list containing 'n' elements:\nThe nth element is indexed as '-1' the (n-1)th element is indexed as '-2' and so on till -n.\nExample:\nmy_list = ['p','r','o','b','e']\nprint(my_list[-2])\n\nOUTPUT:\nb"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "lists"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "How to access a range of elements in a list?"
                on_release:
                    app.root.current = "slice"
                    root.manager.transition.direction = "left"

<Slice>
	name: "slice"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "We can access a range of items in a list by using the slicing operator ':'(colon).\nExample:\nmy_list[1:5]\n\nOUTPUT:\n['r,'o','b','e']."
		Label:
			text:"We can observe that the list elements are displayed from the index in the left of the colon to the index before the last number in the right side of the colon."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "accesslist"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "How to change or add elements to a list?"
                on_release:
                    app.root.current = "HTA"
                    root.manager.transition.direction = "left"

<HowtoA>
	name: "HTA"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Lists are mutable, meaning their elements can be changed unlike string or tuple.For this purpose,we use the assignment,'=' operator.\nWe can add one item to the list by using the append() method and mutiple items by using extend() method.\n '+' can also be used to combine two lists. This is known as contcatenation.\n '*' operator repeats the list for a given number of times."
		Label:
			text:"Example:\nodd = [1, 3, 5]\nodd.append(7)\nprint(odd)\nodd.extend([9, 11, 13])\nprint(odd)\n\nOUTPUT:[1, 3, 5, 7]\n[1, 3, 5, 7, 9, 11, 13]\n\nExample:\nodd = [1, 3, 5]\nprint(odd + [9, 7, 5])\nprint([2] * 3)\n\nOUTPUT:\n[1, 3, 5, 9, 7, 5]\n['2', '2', '2']\n"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "slice"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "How to remove elements from a list?"
                on_release:
                    app.root.current = "HTR"
                    root.manager.transition.direction = "left"

<HowtoR>
	name: "HTR"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "We can delete one or more items from a list using the keyword del. It can even delete the list entirely.\nWe can use remove() method to remove the given item or pop() method to remove an item at the given index.\nThe pop() method removes and returns the last item if the index is not provided. This helps us implement lists as stacks (first in, last out data structure).\nWe can also use the clear() method to empty a list."
		Label:
			text:"Example:\nmy_list = ['p','r','o','b','l','e','m']\nmy_list.remove('p')\nprint(my_list)\nprint(my_list.pop(1))\nprint(my_list)\nprint(my_list.pop())\nprint(my_list)\nmy_list.clear()\nprint(my_list)\nOUTPUT:\n['r', 'o', 'b', 'l', 'e', 'm']\no\n['r', 'b', 'l', 'e', 'm']\nm\n['r', 'b', 'l', 'e']\n[]"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "HTA"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Tupples"
                on_release:
                    app.root.current = "tupple"
                    root.manager.transition.direction = "left"

<Tupple>
	name:"tupple"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Lists are surrounded by square brackets [] and Tuples are surrounded by parenthesis ().\nUnlike lists, tuple can’t be changed or modified after its creation.\n"
		Label:
			text:"The size of tupples(memory occupied) is less than that of lists.This makes it faster.\nTuples are commonly used as the equivalent of a dictionary without keys to store data.\nTuple can also be used as key in dictionary due to their hashable and immutable nature.\nBut lists have more functionality than tupples"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "HTR"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Dictionaries"
                on_release:
                    app.root.current = "dict"
                    root.manager.transition.direction = "left"

<Dictionaries>
	name:"dict"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Python dictionary is an unordered collection of items. Each item of a dictionary has a key/value pair.\nDictionaries are optimized to retrieve values when the key is known.\nCreating a dictionary is as simple as placing items inside curly braces {} separated by commas.\nAn item has a key and a corresponding value that is expressed as a pair (key: value).\nWhile the values can be of any data type and can repeat, keys must be of immutable type (string, number or tuple with immutable elements) and must be unique."
		Label:
			text:"Example:\nmy_dict = {1: 'apple', 2: 'ball'}\nprint(my_dict[1])\n\nOUTPUT:\napple"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "HTA"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Dictionary methods"
                on_release:
                    app.root.current = "dm"
                    root.manager.transition.direction = "left"

<DictionaryMethods>
	name:"dm"
	GridLayout:
		size: root.height,root.width
		rows: 2
		Label:
			text: "Method                    Description\nclear()                    Removes all items from the dictionary.\ncopy()                    Returns a shallow copy of the dictionary.\nfromkeys(seq[, v])                    Returns a new dictionary with keys from seq and value equal to v (defaults to None).\nget(key[,d])                    Returns the value of the key. If the key does not exist, returns d (defaults to None).\nitems()                    Return a new object of the dictionary's items in (key, value) format.\nkeys()                    Returns a new object of the dictionary's keys.\npop(key[,d])                    Removes the item with the key and returns its value or d if key is not found. If d is not provided and the key is not found, it raises KeyError.\npopitem()                    Removes and returns an arbitrary item (key, value). Raises KeyError if the dictionary is empty.\nsetdefault(key[,d])                    Returns the corresponding value if the key is in the dictionary. If not, inserts the key with a value of d and returns d (defaults to None).\nupdate([other])                    Updates the dictionary with the key/value pairs from other, overwriting existing keys.\nvalues()\n                    Returns a new object of the dictionary's values"
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "dict"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Dictionary methods"
                on_release:
                    app.root.current = "stacks"
                    root.manager.transition.direction = "left"

<Stacks>
	name:"stacks"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Stacks are special types of lists which follow a First In Last Out(FILO) or Last In First OUT(LIFO) mechanism for storing and accessing data."
		Label:
			text:"Stacks are created simimlar to lists. While accessing the elements oof a stack, the element which has entered into the stack at last is accessed first and removed from the stack. Next the element which entered second last is accessed, then the third last and so on until the required element is found or the stack is emptied."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "dm"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Q"
                on_release:
                    app.root.current = "q"
                    root.manager.transition.direction = "left"

<Q>
	name:"q"
	GridLayout:
		size: root.height,root.width
		rows: 3
		Label:
			text: "Queues are special types of lists which follow a First In First Out(FIFO) or Last In Last OUT(LILO) mechanism for storing and accessing data."
		Label:
			text:"Queues are created simimlar to lists. While accessing the elements of a queue, the element which has entered into the stack at first is accessed first and removed from the queue. Next the element which entered second is accessed, then the third and so on until the required element is found or the queue is emptied."
		FloatLayout:
			cols: 2
			Button:
				pos_hint:{"x":0,"y":0}
                size_hint: 0.5, 0.65
                text:"Back"
                font_size: 17
                on_release :
                    app.root.current = "stacks"
                    root.manager.transition.direction = "right"
            Button:
            	pos_hint: {"x":0.5,"y":0}
                size_hint : 0.5,0.65
                text: "Q"
                on_release:
                    app.root.current = "final3"
                    root.manager.transition.direction = "left"